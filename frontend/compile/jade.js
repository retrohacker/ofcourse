/*
 * compile/jade.js contains all of the logic for jade files in the asset
 * pipeline
 */

/// Import Modules
var glob = require('glob')
var async = require('async')
var fs = require('fs')
var path = require('path')
var jade = require('jade')
///End Imports

///Export an Object
var m = module.exports = function() {}
m.prototype = Object.create(Object.prototype)
m.prototype.constructor = m
/// End Export

/// Declare Functions on Exported Object
/**
 * generateJade accepts a glob path to your jade files and generates an object
 * in the form:
 * {
 *   "filename" : "Jade Function",
 *   ...
 * }
 *
 * where "filename" is the name of the file *without* the extension (i.e.
 * test.jade would be test) and "Jade Function" is generated by passing the
 * contents of the jade file into jade.compileClient()
 */
m.prototype.generateJade = function generateJade(glob_exp,cb) {
  glob(glob_exp,function(e,files) {
    if(e) return cb(e)
    var result = {} // We will return this if no errors occure
    /**
     * async.each will run the first function on all elements of the files
     * array IN PARALLEL (at the same time). This is super fast. When all
     * functions have finished running, it will call the second function.
     * It also calls the second function on error.
     */
    async.each(
      files,
      function compileJade(file,cb) {
        //First we read the file from disk
        fs.readFile(file,{'encoding':'utf-8'},function(e,content) {
          if(e) return cb(e)
          //Now we compile the contents of the file and add it to our result
          result[path.basename(file,".jade")] =
            jade.compileClient(content, {
              filename: file,
              self: true, //all jade variables are local
              compileDebug: (process.env.NODE_ENV || "dev") === "dev"
            }) //end jade.compileClient
          //end contents[]=
          cb()
        }) //end fs.readFile()
      }, //end compileJade
      function(e) {
        if(e) return cb(e) //don't return incomplete result on error
        return cb(null,result)
      } //end function(e)
    ) // end async.each
  }) // end glob()
} //end m.prototype.generateJade()
///End Declaring Functions on Exported Object
